; UNIT TEST PROGRAM

.equ screen_buffer 0x8000

; MACRO

.macro call(func, param)
    .if param !== A
        SET A, param
    .endif
    JSR func
.endmacro

.macro call(func, param1, param2)
    .if param1 !== A
        SET A, param1
    .endif
    .if param2 !== B
        SET B, param2
    .endif
    JSR func
.endmacro

.macro call(func, param1, param2, param3)
    .if param1 !== A
        SET A, param1
    .endif
    .if param2 !== B
        SET B, param2
    .endif
    .if param3 !== C
        SET C, param3
    .endif
    JSR func
.endmacro

; SET UP CODE

; Screen is set up first for all tests
.prereq ALL
    JSR screen_init
; Under normal conditions, this is run first
; It isn't run in the context of a unit test
.prereq NONE
    call(prints,0,0,default_msg)
    SUB PC, 1

default_msg:
    .dw "Hello, world!", 0

.test Test1

    call(prints,0,0,test_1_msg)
    SET A, 10
    .assert A==10
    SET B, 20
    .assert B==20

test_1_msg:
    .dw "Unit test 1", 0

.endtest

; SUBROUTINES

screen_init:
    HWN A
    SUB A, 1
screen_init_loop:
    IFE A, 0xFFFF
        SET PC, POP
    SET PUSH, A
        HWQ A
        IFE A, 0xf615
            IFE B, 0x7349
                SET PC, init_screen
    SET A, POP
    SUB A, 1
    SET PC, screen_init_loop
init_screen:
    SET A, POP
    SET I, A
    SET C, A
    SET A, 0
    SET B, screen_buffer
    HWI C
    SET A, C
    SUB A, 1
    SET PC, screen_init_loop

prints:
    MUL A, B
    ADD A, B
    ADD A, screen_buffer
prints_loop:
    IFE [C], 0
        SET PC, POP
    SET B, [C]
    BOR B, 0xF000
    SET [A], B
    ADD A, 1
    ADD C, 1
    SET PC, prints_loop